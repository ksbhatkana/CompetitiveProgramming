class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        self.max_diameter = 0  # Global variable to track max diameter
        
        def dfs(node):
            if not node:
                return 0  # Base case: Height of an empty tree is 0
            
            left_height = dfs(node.left)   # Get left subtree height
            right_height = dfs(node.right) # Get right subtree height
            
            # Update max diameter at this node
            self.max_diameter = max(self.max_diameter, left_height + right_height)
            
            return max(left_height, right_height) + 1  # Return height of current node

        dfs(root)  # Start DFS from root
        return self.max_diameter  # Return max diameter found
