# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        result = []
        if root:
            queue = deque([(root, 0, 0)])
            dictio = defaultdict(list)
            while queue:
                node, col, row = queue.popleft()
                dictio[col].append((row, node.val))
                
                if node.left:
                    queue.append((node.left, col-1, row+1))
                
                if node.right:
                    queue.append((node.right, col+1, row+1))

            for col in sorted(dictio.keys()):
                result.append([val for row, val in sorted(dictio[col])])

        return result
